from django import forms
from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User
from django.forms import ModelForm
from .models import Item

 

class NewUserForm(UserCreationForm):
	email = forms.EmailField(required=True)

	class Meta:
		model = User
		fields = {"username", "email", "password1", "password2"}

	def save(self, commit=True):
		user = super(NewUserForm, self).save(commit=False)
		user.email = self.cleaned_data['email']
		if commit:
			user.save()
		return user


"""class ArticleForm(ModelForm):
	class Meta:
	    model = item
	    fields = [ 'item_title', 'item_content', 'item_published', 'item_series',
			'item_slug', 'item_photo', 'item_video']
"""
class CommentForm(forms.Form):
	comment_item = forms.CharField(heml_text="Please enter your nick.")	 = forms.CharField(help_text="Please enter your name.")
	user_lname = forms.CharField(html_text="Please enter your last name.")
	user_email = forms.EmailField(help_text="Please enter your email.")
	user_dob = forms.DateField(heml_text="Please enter your date of birth")

	def clean_rec_data(self):
		fname_data = self.cleaned_data['user_fname']
		lname_data = self.cleaned_data['user_lname']
		email_data = self.cleaned_data['user_email']
		nick_data = self.cleaned_data['user_nick']
		dob_data = self.cleaned_data['user_dob']
		
		if dob_data > datetime.date.today():
			raise ValidationError(_('Invalid date - date of birth is in the future'))
		if fname_data = '':
			raise ValidationError(_('Invalid value in first name, please fill it up'))
		if lname_data = '':
			raise ValidationError(_('Invalid last name, please fill it up'))
		if email_data = '':
			raise ValidationError(_('Invalid value for email, please enter correct format'))
		full_data = self.cleaned_data['user_fname', 'user_lname', 'user_email', 'user_nick' 'user_dob']
		return full_data

	#class Meta:
	#	field = ['comment_item', 'comment_item', 'comment_content', 'comment_date', 'comment_author']

